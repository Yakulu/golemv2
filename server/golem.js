// Generated by CoffeeScript 1.8.0
(function() {
  var PouchDb, app, db, dbMapFns, dbQueries, express;

  express = require('express');

  app = express();

  PouchDb = require('pouchdb');

  app.use('/db', require('express-pouchdb')(PouchDb));

  app.use(express["static"]('public'));

  db = new PouchDb('golemdata');

  dbQueries = {};

  dbMapFns = {};

  dbMapFns.allBySchema = function(doc) {
    if (doc.schema) {
      return emit([doc.schema, doc.creationDate], null);
    }
  };

  dbQueries.all = {
    _id: '_design/all',
    views: {
      bySchema: {
        map: dbMapFns.allBySchema.toString()
      }
    }
  };

  dbMapFns.membersByActivity = function(doc) {
    var activity, _i, _len, _ref, _results;
    if (doc.schema && doc.schema === 'member') {
      _ref = doc.activities;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        activity = _ref[_i];
        _results.push(emit([activity, doc.schema], null));
      }
      return _results;
    }
  };

  dbQueries.members = {
    _id: '_design/members',
    views: {
      byActivity: {
        map: dbMapFns.membersByActivity.toString()
      }
    }
  };

  dbMapFns.tagsCount = function(doc) {
    var emitProp;
    emitProp = function(schema, prop) {
      var p, _i, _len, _ref, _results;
      if (schema == null) {
        schema = doc.schema;
      }
      if (prop == null) {
        prop = 'tags';
      }
      _ref = doc[prop];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(emit([schema, p]));
      }
      return _results;
    };
    if (doc.tags) {
      emitProp();
    }
    if ((doc.schema === 'member') && doc.skills) {
      return emitProp('memberskills', 'skills');
    }
  };

  dbQueries.tags = {
    _id: '_design/tags',
    views: {
      count: {
        map: dbMapFns.tagsCount.toString(),
        reduce: '_count'
      }
    }
  };

  dbMapFns.labelsAll = function(doc) {
    var emitProp;
    emitProp = function(type, prop, coll) {
      var item, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = coll.length; _i < _len; _i++) {
        item = coll[_i];
        _results.push(emit([type, item[prop]]));
      }
      return _results;
    };
    if (doc.tels) {
      emitProp('tels', 'label', doc.tels);
    }
    if (doc.mails) {
      return emitProp('mails', 'label', doc.mails);
    }
  };

  dbQueries.labels = {
    _id: '_design/labels',
    views: {
      all: {
        map: dbMapFns.labelsAll.toString(),
        reduce: '_count'
      }
    }
  };

  db.allDocs(function(err, res) {
    var k, queries, v;
    if (err || res.rows.length === 0) {
      queries = (function() {
        var _results;
        _results = [];
        for (k in dbQueries) {
          v = dbQueries[k];
          _results.push(v);
        }
        return _results;
      })();
      return db.bulkDocs(queries, function(err, res) {
        if (err) {
          return console.log("Error : " + err);
        } else {
          return console.log('db initialized');
        }
      });
    }
  });

  app.listen(8046, function() {});

}).call(this);
